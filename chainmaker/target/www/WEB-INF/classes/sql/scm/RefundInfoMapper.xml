<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.happyjob.chainmaker.scm.dao.RefundInfoDao">

	<!-- 12페이지 반품 신청 목록 _ 혜원 -->

	<!-- 1. 반품 목록 전체 조회 -->    <!-- 검색 체크하기!!!!!!! -->
	<select id="selectRefundList" parameterType="Map"
		resultType="kr.happyjob.chainmaker.scm.model.RefundVO">
		SELECT <!-- @rownum:=@rownum+1 as row_num, -->
		r.refund_no as refund_no,
		r.refund_date as refund_date,
		r.pro_no as pro_no,
		p.pro_name as pro_name,
		r.refund_qty as refund_qty,
		p.pro_price as pro_price,
		p.pro_price * r.refund_qty as total_price,
		r.order_no as order_no,
		r.refund_note as refund_note,
		r.ware_no as ware_no
		
		FROM tb_refund r
		JOIN tb_product p
		ON p.pro_no = r.pro_no
		<where> 
		<!-- where (@rownum:=0)=0 -->
			<if test="(sname != null) and (!sname.equals('')) ">
				<choose>
					<when test= "searchKey eq 'all'.toString()">
						AND CONCAT(r.refund_no, r.pro_no, p.pro_name) REGEXP CONCAT('.', #{sname}, '.')
					</when>
					<when test= "searchKey eq 'refund_no'.toString()">
						AND r.refund_no LIKE CONCAT('%', #{sname}, '%')
					</when>
					<when test= "searchKey eq 'pro_no'.toString()">
						AND r.pro_no LIKE CONCAT('%', #{sname}, '%')
					</when>
					<when test= "searchKey eq 'pro_name'.toString()">
						AND p.pro_name LIKE CONCAT('%', #{sname} , '%')
					</when>
				</choose>
	        </if>
	        <if test="(fromDate != null) and (toDate != null)">
					AND r.refund_date <![CDATA[ >= date(#{fromDate}) ]]> 
					AND r.refund_date <![CDATA[ <= date(#{toDate})+1 ]]>
			</if>
		AND r.order_no is not null
		AND r.refund_confirm_cd = 0
		</where> 
		ORDER BY r.refund_no DESC
		LIMIT #{pageIndex},#{pageSize}
	</select>
	
	
	<!-- 2. (검색 후) 반품 목록 갯수 -->
	<select id="countRefundList" parameterType="Map" resultType="int">
		SELECT COUNT(1) 
		FROM tb_refund r
		JOIN tb_product p
		on p.pro_no = r.pro_no
		<where> 
			<if test="(sname != null) and (!sname.equals('')) ">
					<choose>
						<when test= "searchKey eq 'all'.toString()">
							AND CONCAT(r.refund_no, r.pro_no, p.pro_name) REGEXP CONCAT('.', #{sname}, '.')
						</when>
						<when test= "searchKey eq 'refund_no'.toString()">
							AND r.refund_no LIKE CONCAT('%', #{sname}, '%')
						</when>
						<when test= "searchKey eq 'pro_no'.toString()">
							AND r.pro_no LIKE CONCAT('%', #{sname}, '%')
						</when>
						<when test= "searchKey eq 'pro_name'.toString()">
							AND p.pro_name LIKE CONCAT('%', #{sname} , '%')
						</when>
					</choose>
		        </if>
		        <if test="(fromDate != null) and (toDate != null)">
						AND r.refund_date <![CDATA[ >= date(#{fromDate}) ]]> 
						AND r.refund_date <![CDATA[ <= date(#{toDate})+1 ]]>
				</if>
		AND r.order_no is not null
		AND r.refund_confirm_cd = 0
		</where> 
	</select>


	
	
	


	<!-- 3. 작업지시서 모달창 띄우는것 / 창고검색은 매퍼 따로! -->
	<select id="selectRDocModal" parameterType="Map"
		resultType="kr.happyjob.chainmaker.scm.model.RefundVO">
		SELECT
		r.refund_no as refund_no,
		r.refund_date as refund_date,
		r.pro_no as pro_no,
		p.pro_name as pro_name,
		r.refund_qty as refund_qty,
		p.pro_price as pro_price,
		p.pro_price * r.refund_qty as total_price,
		r.order_no as order_no,
		r.refund_note as refund_note,
		r.ware_no as origin_ware_no
		
		FROM tb_refund r
		JOIN tb_product p
		ON p.pro_no = r.pro_no
		<where> <!-- pk3개여서  -->
		AND r.refund_no = #{refund_no}
		AND r.pro_no = #{pro_no}
		AND r.ware_no = #{ware_no}
		AND r.order_no is not null
		</where>
	</select>
	
	
	
	<!--  4. 창고검색은 매퍼 따로! -->
	<select id="selectWareInfo" parameterType="Map"
		resultType="kr.happyjob.chainmaker.scm.model.WarehouseVO">
	SELECT 
	w.ware_no,
	w.loginID,
	w.ware_zipcode,
	w.ware_dt_address,
	w.ware_address,
	w.ware_name,
	w.ware_cd,
	pwh.pro_no
	
	FROM tb_warehouse w
	JOIN tb_product_warehouse pwh
	ON w.ware_no = pwh.ware_no
	WHERE pwh.pro_no = #{pro_no}

	</select>
	
<!-- 5. 임원승인 누르면 refund 테이블에 confirm_cd,ware_no - update /direction테이블에 ware_no update / tb_io warehouse에 insert -->
	<update id="updateRefundWareNo" parameterType="Map">
        UPDATE tb_refund SET
            ware_no = #{ware_no},
            refund_confirm_cd = 1            
        <where>
        	AND pro_no = #{pro_no}
        	AND refund_no = #{refund_no}
        	AND ware_no = #{origin_ware_no}
        </where>
    </update>
 <!-- 임원승인버튼 누르면 direction에 ware_no, direction manager 도 바껴야한다!  -->   
    <update id="updateDirectionRefundWareNo" parameterType="Map">
        UPDATE tb_direction set
            ware_no = #{ware_no},
            direction_manager = #{loginId}        
        <where>
        	AND pro_no = #{pro_no}
        	AND refund_no = #{refund_no}
        	AND ware_no = #{origin_ware_no}
        </where>
    </update>
	<!-- tb_product_io_warehouse 에 인서트!   -->
     <insert id = "insertProductIoWarehouse" parameterType="Map" >
		INSERT tb_product_io_warehouse(
		order_no,
		refund_no,
		pro_no,
		ware_no,
		pro_io_memo,
		pro_io_cd,
		pro_io_qty
	)
		SELECT
			order_no,
			refund_no,
			pro_no,
			ware_no,
			'기업고객 반품으로 인한 입고예정',
			'in_pre',
			refund_qty
	 	FROM tb_refund	 
	 <where>
	 		AND pro_no = #{pro_no}
        	AND refund_no = #{refund_no}
        	AND ware_no = #{ware_no}
	 </where>
    
    </insert>
    
	
</mapper>