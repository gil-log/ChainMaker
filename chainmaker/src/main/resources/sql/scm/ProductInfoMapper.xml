<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.chainmaker.scm.dao.ProductInfoDao">

	<!-- 제품 목록 조회 -->
	<select id="selectProductInfo" parameterType="Map" resultType="kr.happyjob.chainmaker.scm.model.ProductInfoModel">
		SELECT @rownum:=@rownum+1 as row_num
			,p.pro_no as pro_no
		    , p.deli_company as deli_company
		    , p.pro_name as pro_name
		    , p.pro_deli_price as pro_deli_price
		    , p.pro_model_name as pro_model_name
		    , p.pro_manu_name as pro_manu_name
		    , p.pro_price as pro_price
		    , p.pro_detail as pro_detail
		    , p.pro_cd as pro_cd
		FROM tb_product p

		<where>
		<if test="(sname != null) and (!sname.equals('')) ">
			<choose>
				<when test= "oname eq 'all'.toString()">
					AND concat( p.pro_no, p.pro_name, p.pro_model_name, p.pro_manu_name ) REGEXP concat('.', #{sname}, '.')
				</when>
				<when test= "oname eq 'pro_no'.toString()">
					AND p.pro_no LIKE concat('%', #{sname}, '%')
				</when>
				<when test= "oname eq 'pro_nm'.toString()">
					AND p.pro_name LIKE concat('%', #{sname}, '%')
				</when>
				<when test= "oname eq 'model_nm'.toString()">
					AND p.pro_model_name LIKE concat('%', #{sname}, '%')
				</when>
				<when test= "oname eq 'manu_nm'.toString()">
					AND p.pro_manu_name LIKE concat('%', #{sname}, '%')
				</when>
			</choose>
        </if>
			AND (@rownum:=0)=0
        </where>
        ORDER BY p.pro_cd DESC
		LIMIT #{pageIndex}, #{pageSize}
	</select>
	
	<!-- 상세 코드 조회 -->
	<select id="selectDetailCode" resultType="kr.happyjob.chainmaker.scm.model.DetailCdVO">
		
		SELECT detail_code as detail_code
			 , detail_name as detail_name 
		FROM tb_detail_code 
		<where>
			AND group_code = 'proCD'
			AND use_yn = 'Y'
		</where>
	
	</select>

	<!-- 제품 목록 수 조회 -->
	<select id="countProductInfo" resultType="int" parameterType="Map">
		SELECT COUNT(1) FROM tb_product
		
		<where>
		<if test="(sname != null) and (!sname.equals('')) ">
			<choose>
				<when test= "oname eq 'all'.toString()">
					AND concat( pro_no, pro_name, pro_model_name, pro_manu_name ) REGEXP concat('.', #{sname}, '.')
				</when>
				<when test= "oname eq 'pro_no'.toString()">
					AND pro_no LIKE concat('%', #{sname}, '%')
				</when>
				<when test= "oname eq 'pro_nm'.toString()">
					AND pro_name LIKE concat('%', #{sname}, '%')
				</when>
				<when test= "oname eq 'model_nm'.toString()">
					AND pro_model_name LIKE concat('%', #{sname}, '%')
				</when>
				<when test= "oname eq 'manu_nm'.toString()">
					AND pro_manu_name LIKE concat('%', #{sname}, '%')
				</when>
			</choose>
        </if>
        </where>
	</select>
	
	<!-- 제품 1건 상세정보 -->
	<select id="selectProductDetail" resultType="kr.happyjob.chainmaker.scm.model.ProductInfoModel">

		SELECT p.pro_no as pro_no
		    , p.deli_company as deli_company
		    , p.pro_name as pro_name
		    , p.pro_deli_price as pro_deli_price
		    , p.pro_model_name as pro_model_name
		    , p.pro_manu_name as pro_manu_name
		    , p.pro_price as pro_price
		    , p.pro_detail as pro_detail
		    , p.pro_cd as pro_cd
            , f.file_server_path as file_server_path
            , f.file_ofname as file_ofname
		FROM tb_product p 
        LEFT OUTER JOIN tb_file f
        ON p.pro_no = f.pro_no
		<where> 
			AND p.pro_no=#{pro_no}
		</where> 
	</select>	

	<!-- 제품 테이블 등록 -->	
	<insert id="insertProdInfo" parameterType="Map">
		INSERT INTO tb_product 
		(
			pro_no 
			, pro_name 
			, deli_company 
			, pro_deli_price 
			, pro_model_name
			, pro_manu_name
			, pro_price
			, pro_detail
			, pro_cd
		)
		VALUES 
		(
			#{pro_no} 
			, #{pro_name} 
			, #{deli_company} 
			, #{pro_deli_price}
			, #{pro_model_name}
			, #{pro_manu_name}
			, #{pro_price}
			, #{pro_detail}
			, #{pro_cd}
		)
	</insert>
	
	<!-- 파일 테이블에 제품 내용 등록 -->
	<insert id="insertProdFile" parameterType="Map">
		
		INSERT INTO tb_file 
		
		(
			file_server_path, file_local_path, file_new_name , file_ofname , file_size , pro_no
		)
		VALUES
		
		(
			#{file_server_path} 
			, #{file_local_path} 
			, #{file_new_name} 
			, #{file_ofname} 
			, #{file_size} 
			, #{pro_no}
		)
	</insert>
	
	
	<!-- 파일 테이블의 정보 검색 -->
	<select id="selectFileInfo" parameterType="Map" resultType="kr.happyjob.chainmaker.scm.model.FileModel">
		SELECT file_server_path as file_server_path
		, file_local_path as file_local_path
		, file_new_name as file_new_name
		, file_ofname as file_ofname
		, file_size as file_size
		, pro_no as pro_no
		FROM tb_file
		<where>
			AND pro_no=#{pro_no}
		</where>
	</select>
	
	<!-- 파일 테이블에 제품 내용 삭제 -->
	<delete id="deleteProdFile" parameterType="Map">
		DELETE 
		FROM tb_file
		<where>
			AND pro_no=#{pro_no}
		</where>
	</delete>
	
	<!-- 제품 테이블에 제품 삭제 -->	
	<delete id="deleteProdInfo" parameterType="Map">
		DELETE 
		FROM tb_product
		<where>
			AND pro_no=#{pro_no}
		</where>
	</delete>
	

	<!-- 제품 테이블에 제품 수정 -->		
	<update id="updateProdInfo" parameterType="Map">
		UPDATE tb_product
		SET pro_no = #{pro_no}
		, deli_company = #{deli_company}
		, pro_name = #{pro_name}	
		, pro_deli_price = #{pro_deli_price}
		, pro_model_name = #{pro_model_name}
		, pro_manu_name = #{pro_manu_name}
		, pro_price = #{pro_price}
		, pro_detail = #{pro_detail}
		, pro_cd = #{pro_cd}
		<where>
			AND pro_no=#{pro_no}
		</where>
	</update>
	
	<!-- 파일 테이블에 제품 내용 수정 -->
	<update id="updateProdFile" parameterType="Map">
		UPDATE tb_file
		SET file_no	= #{file_no}
		, file_fname = #{file_fname}
		, file_ofname = #{file_ofname}
		, file_size = #{file_size}
		<where>
			AND pro_no=#{pro_no}
		</where> 
	</update>
	
	

</mapper>