package kr.happyjob.chainmaker.pcm.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.happyjob.chainmaker.pcm.model.OrderDepositProcessingModel;
import kr.happyjob.chainmaker.pcm.service.OrderDepositProcessingService;

@Controller
@RequestMapping("/pcm/")
public class OrderDepositProcessingController {

	//Set logger
	private final Logger logger = LogManager.getLogger(this.getClass());

	//Get class name for logger
	private final String className = this.getClass().toString();

	@Autowired
	private OrderDepositProcessingService orderDepositProcessingService;
	
	@RequestMapping("orderDepositProcessing.do")
	public String orderDepositProcessing(){
		logger.info("구매담당자_기업고객_주문내역관리");
		
		return "/pcm/orderDepositProcessing";
	}

	//구매담당자 - 기업고객_주문내역 조회
	@RequestMapping("orderDepositProcessingList.do")
	public String orderDepositProcessingList(Model model, @RequestParam Map<String, Object> paramMap){		
		logger.info("구매담당자 - 기업고객_주문내역 조회 => 데이터 전송");
		logger.info("paramMap : "+paramMap);
		
		int currentPage=Integer.parseInt((String) paramMap.get("currentPage"));
		int pageSize=Integer.parseInt((String) paramMap.get("pageSize"));
		int pageIndex=(currentPage-1)*pageSize;
		
		paramMap.put("pageIndex", pageIndex);
		paramMap.put("pageSize", pageSize);
		
		
		//DB의 목록 list에 담아 orderDepositProcessingList.jsp로 전달
		List<OrderDepositProcessingModel> listOrderDepositProcessing=orderDepositProcessingService.orderDepositProcessingList(paramMap);
				
		model.addAttribute("listOrderDepositProcessing", listOrderDepositProcessing);
		
		logger.info("orderDepositProcessingList.do ==> listOrderDepositProcessing");
		logger.info(listOrderDepositProcessing);
		
		//DB목록의 total row를 담아 orderDepositProcessingList.jsp로 전달
		int orderDepositProcessingTotal=orderDepositProcessingService.countOrderDepositProcessingList(paramMap);
		logger.info("orderDepositProcessingTotal : "+orderDepositProcessingTotal);
		
		
		
		//페이지 네비게이션 정보
		model.addAttribute("orderDepositProcessingTotal", orderDepositProcessingTotal);		
		model.addAttribute("pageSize", pageSize);
		model.addAttribute("currentPageOrderDepositProcessingList", currentPage);
		
		return "/pcm/orderDepositProcessingList";
	}
	
	//구매담당자 - 기업고객_주문내역 단건 조회
	@RequestMapping("orderDepositProcessingSelect.do")
	@ResponseBody
	public Map<String,Object> orderDepositProcessingSelect(Model model, @RequestParam Map<String, Object> paramMap){
		logger.info("구매담당자 - 기업고객_주문내역 단건 조회 => 데이터 전송");		

		Map<String, Object> resultMap = new HashMap<>();
				
		OrderDepositProcessingModel orderDepositProcessingModel = orderDepositProcessingService.orderDepositProcessingSelect(paramMap);
		
		resultMap.put("orderDepositProcessingModel", orderDepositProcessingModel);		
		
		logger.info("orderDepositProcessingSelect.do ==> resultMap.orderDepositProcessingModel");
		logger.info(resultMap.get("orderDepositProcessingModel").toString());
		
		return resultMap;
	}

	//구매담당자_발주 지시서 목록 단건 상세 조회
	@RequestMapping("modalOrderDepositProcessingdtl.do")
	public String modalOrderDepositProcessingdtl(Model model, @RequestParam Map<String, Object> paramMap){
		logger.info("구매담당자_발주 지시서 목록 단건 상세 조회 => 데이터 전송");		
		
		int currentPage=Integer.parseInt((String) paramMap.get("currentPage"));
		int pageSize=Integer.parseInt((String) paramMap.get("pageSize"));
		int pageIndex=(currentPage-1)*pageSize;
		
		paramMap.put("pageIndex", pageIndex);
		paramMap.put("pageSize", pageSize);
		
		//DB의 목록 list에 담아 modalPurchaseDtlList.jsp로 전달
		List<OrderDepositProcessingModel> modalOrderDepositProcessingDtlList = orderDepositProcessingService.orderDepositProcessingDtlList(paramMap);
		model.addAttribute("modalOrderDepositProcessingDtlList", modalOrderDepositProcessingDtlList);		
		
		//DB목록의 total row를 담아 purchaseOrderList.jsp로 전달
		int modalOrderDepositProcessingDtlTotal = orderDepositProcessingService.countOrderDepositProcessingDtlList(paramMap);
		
		logger.info("modalOrderDepositProcessingdtl.do ==> modalOrderDepositProcessingDtlList");
		logger.info(modalOrderDepositProcessingDtlList);
		
		
		//페이지 네비게이션 정보
		model.addAttribute("modalOrderDepositProcessingDtlTotal", modalOrderDepositProcessingDtlTotal);		
		model.addAttribute("pageSize", pageSize);
		model.addAttribute("currentPageModalOrderDepositProcessingDtl", currentPage);
				
		return "/pcm/orderDepositProcessingDtlList";
	}
	
	//입금 확인 처리
	@RequestMapping("confirmDeposit.do")
	@ResponseBody
	public String confirmDeposit(Model model, @RequestParam Map<String, Object> paramMap){
		logger.info("입금 확인 처리");
		String result="";
		
		if(orderDepositProcessingService.updateOrderDepositProcessing(paramMap) > 0) {
			result="Complete Deposit Confirm.";
		}else{
			result="Error Deposit Confirm.";
		}		
		return result;
	}
}

