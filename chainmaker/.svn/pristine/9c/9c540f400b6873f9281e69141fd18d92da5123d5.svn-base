package kr.happyjob.chainmaker.dlm.controller;

import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpSession;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.happyjob.chainmaker.dlm.model.DeliveryBuyerModel;
import kr.happyjob.chainmaker.dlm.service.DeliveryBuyerService;

@Controller
@RequestMapping("/dlm/")
public class DeliveryBuyerController {
  
	// Set logger
	private final Logger logger = LogManager.getLogger(this.getClass());
	  
	// Get class name for logger
	private final String className = this.getClass().toString();
  
	@Autowired
	private DeliveryBuyerService deliveryBuyerService;
	//배송담당자_기업고객_발주 지시서 목록
	@RequestMapping("deliveryBuyer.do")
	public String deliveryBuyer() {
		logger.info("기업고객_배송 지시서 목록_배송담당자 페이지");
		logger.info(" + Start - " + className + ".initWhInfo");
		    
		return "dlm/deliveryBuyer";
	}
	  
	//배송담당자_기업고객_발주 지시서 목록 조회
	@RequestMapping("deliveryBuyerList.do")
	public String deliveryBuyerList(Model model, @RequestParam Map<String, Object> paramMap, HttpSession session){		
		logger.info("배송담당자 - 기업고객_배송 지시서 목록 조회 => 데이터 전송 // deliveryBuyerList.do");
		logger.info("paramMap : "+paramMap);
		logger.info("session : "+session.getAttribute("loginId"));
		
		int currentPage=Integer.parseInt((String) paramMap.get("currentPage"));
		int pageSize=Integer.parseInt((String) paramMap.get("pageSize"));
		int pageIndex=(currentPage-1)*pageSize;
		
		
		paramMap.put("pageIndex", pageIndex);
		paramMap.put("pageSize", pageSize);
		paramMap.put("deliveryID", session.getAttribute("loginId"));
		
		
		//DB의 목록 list에 담아 deliveryBuyerList.jsp로 전달
		List<DeliveryBuyerModel> listDeliveryBuyer=deliveryBuyerService.deliveryBuyerList(paramMap);
				
		model.addAttribute("listDeliveryBuyer", listDeliveryBuyer);
		
		//DB목록의 total row를 담아 deliveryBuyerList.jsp로 전달
		int deliveryBuyerTotal=deliveryBuyerService.countDeliveryBuyerList(paramMap);
		logger.info("deliveryBuyerList.do ==> listDeliveryBuyer");
		logger.info(listDeliveryBuyer);
		
		
		//페이지 네비게이션 정보
		model.addAttribute("deliveryBuyerTotal", deliveryBuyerTotal);		
		model.addAttribute("pageSize", pageSize);
		model.addAttribute("currentPageDeliveryBuyerList", currentPage);
		
		return "/dlm/deliveryBuyerList";
	}
	
	//구매담당자_발주 지시서 목록 단건 조회
	@RequestMapping("deliveryBuyerSelect.do")
	@ResponseBody
	public Map<String,Object> deliveryBuyerSelect(Model model, @RequestParam Map<String, Object> paramMap, HttpSession session){
		logger.info("배송담당자 - 기업고객_배송 지시서 디테일 목록 조회 => 데이터 전송 // deliveryBuyerSelect.do");		
	
		Map<String, Object> resultMap = new HashMap<>();
		paramMap.put("deliveryID", session.getAttribute("loginId"));
		
		logger.info("paramMap : "+paramMap);		
		
		DeliveryBuyerModel deliveryBuyerModel = deliveryBuyerService.deliveryBuyerSelect(paramMap);
		
		resultMap.put("deliveryBuyerModel", deliveryBuyerModel);		
		
		logger.info("deliveryBuyerSelect.do ==> resultMap.deliveryBuyerModel");
		logger.info(resultMap.get("deliveryBuyerModel"));
		
		return resultMap;
	}
	//배송담당자_기업고객_발주 지시서 목록 조회
	@RequestMapping("deliveryBuyerDtlList.do")
	public String deliveryBuyerDtlList(Model model, @RequestParam Map<String, Object> paramMap, HttpSession session){		
		logger.info("배송담당자 - 기업고객_배송 지시서 목록 조회 => 데이터 전송 // deliveryBuyerList.do");
		logger.info("paramMap : "+paramMap);
		logger.info("session : "+session.getAttribute("loginId"));
		
		int currentPage=Integer.parseInt((String) paramMap.get("currentPage"));
		int pageSize=Integer.parseInt((String) paramMap.get("pageSize"));
		int pageIndex=(currentPage-1)*pageSize;
		
		
		paramMap.put("pageIndex", pageIndex);
		paramMap.put("pageSize", pageSize);
		paramMap.put("deliveryID", session.getAttribute("loginId"));
		
		
		//DB의 목록 list에 담아 deliveryBuyerList.jsp로 전달
		List<DeliveryBuyerModel> listDeliveryBuyerDtl=deliveryBuyerService.deliveryBuyerDtlList(paramMap);
		
		model.addAttribute("listDeliveryBuyerDtl", listDeliveryBuyerDtl);
		
		//DB목록의 total row를 담아 deliveryBuyerList.jsp로 전달
		int modalDeliveryBuyerDtlTotal=deliveryBuyerService.countDeliveryBuyerDtlList(paramMap);
		logger.info("deliveryBuyerDtlList.do ==> listDeliveryBuyerDtl");
		logger.info(listDeliveryBuyerDtl);
		
		
		//페이지 네비게이션 정보
		model.addAttribute("modalDeliveryBuyerDtlTotal", modalDeliveryBuyerDtlTotal);		
		model.addAttribute("pageSize", pageSize);
		model.addAttribute("currentPageDeliveryBuyerDtlList", currentPage);
		
		return "/dlm/deliveryBuyerDtlList";
	}
	
	//발주서 전송(email)
	@RequestMapping("sendDelivery.do")
	@ResponseBody
	public String sendDelivery(Model model, @RequestParam Map<String, Object> paramMap, HttpSession session){
		logger.info("반품지시서 메일 전송");
		
		paramMap.put("deliveryID", session.getAttribute("loginId"));
		String result="";
		
		List<DeliveryBuyerModel> listDeliveryBuyerDtl=deliveryBuyerService.deliveryBuyerDtlList(paramMap);
		logger.info("listDeliveryBuyerDtl : "+listDeliveryBuyerDtl);
		
		for(DeliveryBuyerModel dbm:listDeliveryBuyerDtl){
			DeliveryBuyerModel deliveryBuyerModel = new DeliveryBuyerModel();
			deliveryBuyerModel.setOrder_no(dbm.getOrder_no());
			deliveryBuyerModel.setShip_cd(dbm.getShip_cd());
			deliveryBuyerModel.setPro_no(dbm.getPro_no());
			deliveryBuyerModel.setShip_qty(dbm.getShip_qty());
			deliveryBuyerModel.setWare_no(dbm.getWare_no());
			
			if(deliveryBuyerModel.getShip_cd().equals("waiting")){			
				paramMap.put("changeCD","loading");
				paramMap.put("pro_io_cd","out_done");
				paramMap.put("ship_cd",deliveryBuyerModel.getShip_cd());
				paramMap.put("pro_no",deliveryBuyerModel.getPro_no());
				paramMap.put("ship_qty",deliveryBuyerModel.getShip_qty());
				paramMap.put("ware_no",deliveryBuyerModel.getWare_no());
				logger.info("deliveryBuyerModel.getShip_cd().equals('waiting') => paramMap : "+paramMap);
				
				deliveryBuyerService.updateDeliveryBuyerShipCD(paramMap);
				deliveryBuyerService.updateDeliveryBuyerProIOCD(paramMap);
				deliveryBuyerService.updateDeliveryBuyerProWareQty(paramMap);
				result=emailSend(listDeliveryBuyerDtl)+"\nDelivery Status : "+(String) paramMap.get("changeCD");		
				
			}else if(deliveryBuyerModel.getShip_cd().equals("loading")){			
				paramMap.put("changeCD","complete");
				logger.info("deliveryBuyerModel.getShip_cd().equals('loading') => paramMap : "+paramMap);
				
				deliveryBuyerService.updateFinalDeliveryBuyerShipCD(paramMap);
				result=(String) paramMap.get("changeCD");
			}
		}
		return result;
	}	
	// 메일 전송 메서드
	public String emailSend(List<DeliveryBuyerModel> listDeliveryBuyerDtl) {
		logger.info("RegisterFindIdEmailSend => returnOrderDtl");
		logger.info(listDeliveryBuyerDtl.toString());
		
		String host = "smtp.gmail.com";
		final String username = "yoodh9044@gmail.com";
		final String password = "aielgmhtsuizbuem";
		int port = 465;
//		StringBuilder authNum = new StringBuilder();
		String content="";
		StringBuilder tbody = new StringBuilder();
		
		Properties props = System.getProperties();
	
		props.put("mail.smtp.host", host);
		props.put("mail.smtp.port", port);
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.ssl.enable", true);
		props.put("mail.smtp.ssl.trust", host);
	
		Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
			String un = username;
			String pw = password;
	
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(un, pw);
			}
		});
		session.setDebug(true);
	
		try {
			MimeMessage message = new MimeMessage(session);
			try {
				message.setFrom(new InternetAddress("yoodh9044@gmail.com", "ChainMaker 발주 지시서 입니다.", "utf-8"));
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
	
			// 메일 받는 사람
			message.addRecipient(Message.RecipientType.TO, new InternetAddress(listDeliveryBuyerDtl.get(0).getUser_email()));
	
			// 메일 제목
			message.setSubject("ChainMaker 반품 지시서 전송","utf-8");
			
			for(DeliveryBuyerModel dbm:listDeliveryBuyerDtl){
				tbody.append("<tr style="+"text-align: center;"+">"
						+ "<td>"+dbm.getPro_name()
						+"("+dbm.getPro_no()+")</td>"
						+ "<td>"+dbm.getShip_qty()+"</td>"
						+ "<td>"+dbm.getWare_no()+"</td>"
						+ "<td>"+dbm.getWare_name()+"</td>"
						+ "<td>"+dbm.getWare_address()+" "+dbm.getWare_dt_address()+"</td>"
						+ "</tr>");
			}
			// 메일 내용			
			content="<h1>배송 지시서</h1>"
					+"<table "+"style="+"margin-top: 50px; width: 80%; border: 1px solid #000000;"+">"
					+"<colgroup>"
					+"<col width="+"60px"+"/>"
					+"<col width="+"40px"+"/>"
					+"<col width="+"60px"+"/>"
					+"<col width="+"60px"+"/>"
					+"<col width="+"100px"+"/>"
					+"<col width="+"450px"+"/>"
					+"</colgroup>"
					+"<tbody>"
					+"<tr style="+"text-align: center;"+">"
					+"<th scope="+"row"+" style=background-color: #6E6E6E;"+">주문번호</th>"
					+"<td>"+listDeliveryBuyerDtl.get(0).getOrder_no()+"</td>"
					+"<th scope="+"row"+" style=background-color: #6E6E6E;"+">주문고객</th>"
					+"<td>"+listDeliveryBuyerDtl.get(0).getUser_company()+"</td>"
					+"<th scope="+"row"+" style=background-color: #6E6E6E;"+">주문고객 주소</th>"
					+"<td>"+listDeliveryBuyerDtl.get(0).getUser_address()+" "+listDeliveryBuyerDtl.get(0).getUser_dt_address()+"</td>"
					+"</tr>"
					+"</tbody>"
					+"</table>"					
					+"<table "+"style="+"margin-top: 100px; border: 1px solid #000000;"+">"
					+"<colgroup>"
					+"<col width="+"6%"+"/>"
					+"<col width="+"4%"+"/>"
					+"<col width="+"5%"+"/>"
					+"<col width="+"8%"+"/>"
					+"<col width="+"15%"+"/>"
					+"</colgroup>"
					+"<thead>"
					+"<tr "+"style="+"background-color: #6E6E6E;"+">"
					+"<th scope="+"row"+" style="+"font-weight: bold;>주문번호</th>"				
					+"<th scope="+"row"+" style="+"font-weight: bold;>수량</th>"				
					+"<th scope="+"row"+" style="+"font-weight: bold;>창고번호</th>"				
					+"<th scope="+"row"+" style="+"font-weight: bold;>창고이름</th>"				
					+"<th scope="+"row"+" style="+"font-weight: bold;>창고주소</th>"				
					+"</tr>"
					+"</thead>"
					+"<tbody>"
					+tbody
					+"</tbody>"
					+"</table>";			
			
			logger.info("content : " + content);
			logger.info("tbody : " + tbody);
			
			message.setContent(content,"text/html;charset=euc-kr");
			Transport.send(message);
			System.out.println("전송완료");
	
		} catch (AddressException e) {
			e.printStackTrace();
		} catch (MessagingException e) {
			e.printStackTrace();
		}
		return "ChainMaker 반품 지시서 전송";
	}
}
