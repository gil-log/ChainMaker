<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.happyjob.chainmaker.ged.dao.RefundConfirmDao">
	<!-- 26페이지 반품관련 임원승인 혜원  -->
	
	
	<!-- 1. 승인전 반품 목록 띄우기  -->
	<select id="selectBeforeApproveRefundList" parameterType="Map"
		resultType="kr.happyjob.chainmaker.ged.model.RefundConfirmInfoVO">

		SELECT @rownum:=@rownum+1 as row_num,
			r.refund_no,
			r.pro_no,
			r.ware_no,
			u.user_company,
			p.pro_name,
			o.order_date,
			r.refund_date,
			o.order_qty,
			r.refund_qty,
			p.pro_price * r.refund_qty as total_price
		FROM tb_refund r
		     JOIN tb_order o on r.pro_no = o.pro_no and r.order_no = o.order_no
		     JOIN tb_product p on o.pro_no = p.pro_no
		     JOIN tb_userinfo u on o.loginID = u.loginID and u.user_type  = 'C'
		 <where>     		  
				<if test="(sname != null) and (!sname.equals('')) ">
					<choose>					
						<when test= "searchKey eq 'all'.toString()">
							AND CONCAT(u.user_company, p.pro_name) REGEXP CONCAT('.', #{sname}, '.')
						</when>	
						<when test= "searchKey eq 'user_company'.toString()">
							AND u.user_company LIKE CONCAT('%', #{sname}, '%')
						</when>	
						<when test= "searchKey eq 'pro_name'.toString()">
							AND p.pro_name LIKE CONCAT('%', #{sname}, '%')
						</when>	

					</choose>
				</if>
				<if test="(fromDate != null) and (toDate != null)">
					AND r.refund_date <![CDATA[ >= date(#{fromDate}) ]]> 
					AND r.refund_date <![CDATA[ <= date(#{toDate})+1 ]]>
				</if>
		    
		 AND (@rownum:=0)=0
		 AND r.order_no is not null
		 AND r.refund_confirm_cd = 1
	    </where>
	    ORDER BY r.refund_no ,r.pro_no ,r.ware_no DESC
		LIMIT #{pageIndex},#{pageSize}
	</select>		
	
	
	<!-- 2. 반품 목록 갯수 -->
	<select id="countBeforeApprovePurchaseList" parameterType="Map" resultType="int">
		SELECT count(1) from tb_refund r
		<where>
				<if test="(sname != null) and (!sname.equals('')) ">
					<choose>					
						<when test= "searchKey eq 'all'.toString()">
							AND CONCAT(u.user_company, p.pro_name) REGEXP CONCAT('.', #{sname}, '.')
						</when>	
						<when test= "searchKey eq 'user_company'.toString()">
							AND u.user_company LIKE CONCAT('%', #{sname}, '%')
						</when>	
						<when test= "searchKey eq 'pro_name'.toString()">
							AND p.pro_name LIKE CONCAT('%', #{sname}, '%')
						</when>	

					</choose>
				</if>
				<if test="(fromDate != null) and (toDate != null)">
					AND r.refund_date <![CDATA[ >= date(#{fromDate}) ]]> 
					AND r.refund_date <![CDATA[ <= date(#{toDate})+1 ]]>
				</if>
		AND r.order_no IS NOT NULL
		AND r.refund_confirm_cd = 1
		</where>
	</select>
	
	
	<!-- 임원승인이 최종 승인버튼 따악 누르면!  tb_refund 에 컨펌cd  1에서 2로   -->
	<update id="updateRefundConfirm" parameterType="Map" >
        UPDATE tb_refund SET
            refund_confirm_cd = 2            
        <where>
        	AND pro_no = #{pro_no}
        	AND refund_no = #{refund_no}
        	AND ware_no = #{ware_no}
        	AND refund_confirm_cd = 1   
        </where>
    </update> 
   
	
	
      
      
    <!-- 나중에 정렬조건 걸꺼면! 이런식으로! 
    <IF 날짜
		   order by r.refund_no desc
    
    if( 이름
       order by r.name desc
        -->

	<!-- <select id="selectBeforeApprovePurchaseList" resultType="kr.happyjob.chainmaker.ged.model.PurchaseInfoVO">
		SELECT deli_info.deli_company, product_info.purchase_no, product_info.pro_name, product_info.purchase_qty,
		product_info.purchase_price, product_info.purchase_date, userinfo.name
		
		FROM 
		(SELECT product.deli_no, product.pro_name, 
		sum(purchase.purchase_qty *product.pro_deli_price) as purchase_price,
		purchase.purchase_no, purchase.pro_no, purchase.loginID, 
		sum(purchase.purchase_qty) as purchase_qty, purchase.purchase_date
		
		FROM tb_product product, tb_purchase purchase

		WHERE product.pro_no = purchase.pro_no
		
		AND purchase.purchase_cd = 0
		
		<if test='pro_name != null'>
		AND product.pro_name LIKE CONCAT('%', #{pro_name}, '%')
		</if>
		
		<if test='startDate != null and endDate != null'>
		AND DATE(purchase.purchase_date) BETWEEN #{startDate} AND #{endDate}
		</if>
		
		GROUP BY purchase.purchase_no
		) product_info

		LEFT JOIN tb_userinfo userinfo
		ON product_info.loginID = userinfo.loginID
	
		LEFT JOIN
		(SELECT deli_no, deli_company
		FROM tb_delivery
		) deli_info
		ON product_info.deli_no = deli_info.deli_no
		
		ORDER BY product_info.purchase_date
		
		LIMIT #{pageIndex}, #{pageSize}
	</select>

	<select id="countBeforeApprovePurchaseList" resultType="int">
		SELECT COUNT(1) as tot_cnt
		FROM
		(
		SELECT deli_info.deli_company, product_info.purchase_no, product_info.pro_name, product_info.purchase_qty,
		product_info.purchase_price, product_info.purchase_date, userinfo.name
		
		FROM 
		(SELECT product.deli_no, product.pro_name, 
		sum(purchase.purchase_qty *product.pro_deli_price) as purchase_price,
		purchase.purchase_no, purchase.pro_no, purchase.loginID, 
		sum(purchase.purchase_qty) as purchase_qty, purchase.purchase_date
		
		FROM tb_product product, tb_purchase purchase

		WHERE product.pro_no = purchase.pro_no
		
		AND purchase.purchase_cd = 0
		
		<if test='pro_name != null'>
		AND product.pro_name LIKE CONCAT('%', #{pro_name}, '%')
		</if>
		
		<if test='startDate != null and endDate != null'>
		AND DATE(purchase.purchase_date) BETWEEN #{startDate} AND #{endDate}
		</if>
		
		GROUP BY purchase.purchase_no
		) product_info

		LEFT JOIN tb_userinfo userinfo
		ON product_info.loginID = userinfo.loginID
	
		LEFT JOIN
		(SELECT deli_no, deli_company
		FROM tb_delivery
		) deli_info
		ON product_info.deli_no = deli_info.deli_no
		
		LIMIT #{pageIndex}, #{pageSize}
		) total_count
	</select>
	
	<update id="updatePurchaseInfoToConfirmByPurchaseNo" parameterType="kr.happyjob.chainmaker.ged.model.PurchaseInfoDTO">
		UPDATE tb_purchase
		SET purchase_cd = 1, purchase_date = now()
		WHERE purchase_no = #{purchase_no}
	</update> -->
</mapper>
