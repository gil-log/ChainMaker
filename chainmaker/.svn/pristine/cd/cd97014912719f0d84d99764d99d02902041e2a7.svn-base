package kr.happyjob.chainmaker.pcm.controller;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.happyjob.chainmaker.pcm.model.PurchaseOrderModel;
import kr.happyjob.chainmaker.pcm.service.PurchaseOrderService;

@Controller
@RequestMapping("/pcm/")
public class PurchaseOrderController {

	//Set logger
	private final Logger logger = LogManager.getLogger(this.getClass());

	//Get class name for logger
	private final String className = this.getClass().toString();

	@Autowired
	private PurchaseOrderService purchaseOrderService;
	
	@RequestMapping("purchaseOrder.do")
	public String purchaseOrder(){
		logger.info("구매담당자 - 제품 발주/반품 목록");
		
		return "pcm/purchaseOrder";
	}
	
	//구매담당자_발주 지시서 목록 조회
	@RequestMapping("purchaseOrderList.do")
	public String purchaseOrderList(Model model, @RequestParam Map<String, Object> paramMap){		
		logger.info("구매담당자 - 제품 발주/반품 목록 => 데이터 전송");
		logger.info("paramMap : "+paramMap);
		
		int currentPage=Integer.parseInt((String) paramMap.get("currentPage"));
		int pageSize=Integer.parseInt((String) paramMap.get("pageSize"));
		int pageIndex=(currentPage-1)*pageSize;
		
		paramMap.put("pageIndex", pageIndex);
		paramMap.put("pageSize", pageSize);
		
		
		//DB의 목록 list에 담아 purchaseOrderList.jsp로 전달
		List<PurchaseOrderModel> listPurchaseOrder=purchaseOrderService.purchaseOrderList(paramMap);
				
		model.addAttribute("listPurchaseOrder", listPurchaseOrder);
		
		//DB목록의 total row를 담아 purchaseOrderList.jsp로 전달
		int purchaseOrderTotal=purchaseOrderService.countPurchaseOrderList(paramMap);
		logger.info("purchaseOrderList.do ==> listPurchaseOrder");
		logger.info(listPurchaseOrder);
		
		
		//페이지 네비게이션 정보
		model.addAttribute("purchaseOrderTotal", purchaseOrderTotal);		
		model.addAttribute("pageSize", pageSize);
		model.addAttribute("currentPagePurchaseOrderList", currentPage);
		
		return "/pcm/purchaseOrderList";
	}
	
	//구매담당자_발주 지시서 목록 단건 조회
	@RequestMapping("purchaseOrderSelect.do")
	@ResponseBody
	public Map<String,Object> purchaseOrderSelect(Model model, @RequestParam Map<String, Object> paramMap){
		logger.info("구매담당자 - 제품 발주/반품 단품 목록 => 데이터 전송");		

		Map<String, Object> resultMap = new HashMap<>();
				
		PurchaseOrderModel purchaseOrderModel = purchaseOrderService.purchaseOrderSelect(paramMap);
		
		resultMap.put("purchaseOrderModel", purchaseOrderModel);		
		
		logger.info("purchaseOrderSelect.do ==> resultMap.purchaseOrderModel");
		logger.info(resultMap.get(purchaseOrderModel));
		
		return resultMap;
	}

	//구매담당자_발주 지시서 목록 단건 상세 조회
	@RequestMapping("modalPurchasedtl.do")
	public String modalPurchasedtl(Model model, @RequestParam Map<String, Object> paramMap){
		logger.info("구매담당자 - 제품 발주/반품 단품 목록 => 데이터 전송");		
		
		int currentPage=Integer.parseInt((String) paramMap.get("currentPage"));
		int pageSize=Integer.parseInt((String) paramMap.get("pageSize"));
		int pageIndex=(currentPage-1)*pageSize;
		
		paramMap.put("pageIndex", pageIndex);
		paramMap.put("pageSize", pageSize);
		
		//DB의 목록 list에 담아 modalPurchaseDtlList.jsp로 전달
		List<PurchaseOrderModel> modalPurchaseDtlList = purchaseOrderService.purchaseDtlList(paramMap);	
		model.addAttribute("modalPurchaseDtlList", modalPurchaseDtlList);		
		
		//DB목록의 total row를 담아 purchaseOrderList.jsp로 전달
		int modalPurchaseDtlTotal=purchaseOrderService.countPurchaseDtlList(paramMap);
		logger.info("modalPurchasedtl.do ==> modalPurchaseDtlList");
		logger.info(modalPurchaseDtlList);
		
		
		//페이지 네비게이션 정보
		model.addAttribute("modalPurchaseDtlTotal", modalPurchaseDtlTotal);		
		model.addAttribute("pageSize", pageSize);
		model.addAttribute("currentPageModalPurchaseDtl", currentPage);
				
		return "/pcm/modalPurchaseDtlList";
	}
	
	//발주서 전송(email)
	@RequestMapping("sendPurchase.do")
	@ResponseBody
	public String sendPurchase(Model model, @RequestParam Map<String, Object> paramMap){
		logger.info("발주지시서 메일 전송");
		logger.info("sendPurchase.do => paramMap : "+paramMap);
		
		int currentPage=Integer.parseInt((String) paramMap.get("currentPage"));
		int pageSize=Integer.parseInt((String) paramMap.get("pageSize"));
		int pageIndex=(currentPage-1)*pageSize;
		
		paramMap.put("pageIndex", 0);
		paramMap.put("pageSize", 100);
		
		List<PurchaseOrderModel> modalPurchaseDtlList = purchaseOrderService.purchaseDtlList(paramMap);	
		logger.info("modalPurchaseDtlList : "+modalPurchaseDtlList);
		PurchaseOrderModel purchase=modalPurchaseDtlList.get(0);	
		logger.info("purchase : "+purchase);
		
		String result=RegisterFindIdEmailSend(modalPurchaseDtlList);
		purchaseOrderService.updatePurchaseCD(paramMap);
		return result;
	}
	
	// 메일 전송 메서드
	public String RegisterFindIdEmailSend(List<PurchaseOrderModel> modalPurchaseDtlList) {
		String host = "smtp.gmail.com";
		final String username = "yoodh9044@gmail.com";
		final String password = "aielgmhtsuizbuem";
		int port = 465;
		String authNum = null;

		Properties props = System.getProperties();

		props.put("mail.smtp.host", host);
		props.put("mail.smtp.port", port);
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.ssl.enable", true);
		props.put("mail.smtp.ssl.trust", host);

		Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
			String un = username;
			String pw = password;

			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(un, pw);
			}
		});
		session.setDebug(true);

		try {
			MimeMessage message = new MimeMessage(session);
			try {
				message.setFrom(new InternetAddress("yoodh9044@gmail.com", "ChainMaker 발주 지시서 입니다.", "utf-8"));
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}

			// 메일 받는 사람
			message.addRecipient(Message.RecipientType.TO, new InternetAddress(modalPurchaseDtlList.get(0).getDeli_email()));

			// 메일 제목
			message.setSubject("ChainMaker 발주 지시서 전송");

			// 메일 내용			
			authNum = "@@@ Send Purchase Direction @@@";
			
			message.setText(modalPurchaseDtlList.toString());
			Transport.send(message);
			System.out.println("전송완료");

		} catch (AddressException e) {
			e.printStackTrace();
		} catch (MessagingException e) {
			e.printStackTrace();
		}
		return authNum;
	}
}

